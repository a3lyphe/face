<!DOCType html>
<html>
	<head>
		<title>Face.0.1.6.2009.07.31</title>
		<meta
			http-equiv="Content-Script-Type"
			content="text/javascript"
			/>
		<meta
			http-equiv="Content-Style-Type"
			content="text/css"
			/>
		<meta
			http-equiv="content-language"
			content="de"
			/>
		<meta
			http-equiv="content-Type"
			content="text/html; charset=utf-8"
			/>
		<meta
			http-equiv="set-cookie"
			content="
				cookieName=cookiewert;
				expires=Sun, 01 Jan 2006 00:00:00 GMT;
				path=/;
				"
			/>
		<meta
			http-equiv="cache-control"
			content="no-cache" /><!--No Cache for: Browser-->
		<meta
			http-equiv="pragma"
			content="no-cache"
			/><!--No Cache for: Proxy-Server -->
		<meta
			name="generator"
			content="A3lyphe"
			/>
		<style>
			body
			{
				background-color:#632A40;
				padding:0;
				margin:0;
			}
			*
			{
				padding:0;
				margin:0;
				border:none;
			}
			img
			{
				width:64px;
				height:96px;
			}
			li
			{
				/*position:absolute;*/
				padding:0;
				margin:0;
				float:left;
				clear:right;
				margin:24px;
			}
			/*Face*/
			.Face
			{
				width:128px;
				height:224px;
			}
			.Face *
			{
				position:absolute;
			}
			.Face .Head
			{
				
			}
			.Face .Hair
			{
				
			}
			.Face .Eye
			{
				
			}
			.Face .Brow
			{
				
			}
			.Face .Nose
			{
				
			}
			.Face .Lip
			{
				
			}
			.Face .Beard
			{
				display:none;
			}
			.Face .Hat
			{
				display:none;
			}
			.Face .Accessoire
			{
				display:none;
			}
		</style>
		<script>//Classes
			var Face=function()
			{
				var my=this;
				this.Name='Face';
				this.id;
				this.visibility;
				this.x;
				this.Head;
				this.Hair;
				this.Eye;
				this.Brow;
				this.Nose;
				this.Lip;
				this.Beard;
				this.Hat;
				this.Accessoire;
				this.HtML='';
				this.Fold='Icon';
				/*
				this.make=function(Hold)
				{
					for(var i=0;i<Hold.length;i++)
					{//instance-generation:Head
						var that=new InstanceOf(my.Name);//instance of a 'Head'
						that.Rank=i;//set the Rank of the Head-Instance (needed for path generation
						Hold[i]=that;
					}
				}
				*///replaced with Face.prototype.make=...;methods defined inside classes generate new functions on any new instance; via prototype the set is defined once and used many times
			}
			Face.prototype.make=function(Hold)
			{
				for(var i=0;i<Hold.length;i++)
				{//instance-generation:Head
					var that=new InstanceOf(my.Name);//instance of a 'Head'
					that.Rank=i;//set the Rank of the Head-Instance (needed for path generation
					Hold[i]=that;
				}
			}
		</script>
		<script>//functions
			function createInstancesFrom(Class,Amount)
			{
				for(i=0;i<Amount.length;i++)
				{//instance-generation:Head
					var that=new InstanceOf(Class);//instance of a 'Head'
					that.Rank=i;//set the Rank of the Head-Instance (needed for path generation
					Amount[i]=that;
				}
			}
			function createInstancesFromArrayOfNames(O)
			{
				for(o in O)
				{
					createInstancesFrom(
						O[o]
						,them[O[o]]
					);
				}
			}
			function Whos(that)
			{
				alert(''
					+'id: '
						+that.id
					+';'
				);
			}
		</script>
		<script>//Global Variables
			Icon={};// ={} short for =new Object()
			Icon.Hold='Icon';//the mainly used images Folder directly under root directory

			//Arrays for images to build pirates
			var them=
			{
				Head:new Array(5),
				Hair:new Array(19),
				Eye:new Array(9),
				Brow:new Array(7),
				Nose:new Array(6),
				Lip:new Array(9),
				Beard:new Array(20),
				Hat:new Array(8),
				Accessoire:new Array(6),

				much:new Array(99)//How many Faces?
			}

			//class:instanceOf
			var InstanceOf=function(Class)
			{//a general Template-Class or better said: personalized Constructor-Method to have construction of diverse classes under control in one single place; for later usage with own garbage-collector or guid-generator and similar routines
				this.Name=Class;
				this.Hold=Icon.Hold;//the parent Folder
				this.Fold=Class;//the Folder the generated Instance is stored at (e.g.:'Head')
				this.Name=Class;//the Name under which the generated Instance is filed (e.g.:'Head.1','Head01','CrumpyHead')
				this.Type='png';//the Type of image the generated Instance is stored in (e.g.:png,jpg,gif,svg)
				this.Rank;//position in list/hierarchy/array
				/*
				this.path=function()
				{//defines the path including the file-name and -type; just to have a template for using naming- and sorting conventions; should be avoided by having the ability to load files automagically (with help of HTML 5 or server-side routines)
					return(''
								+this.Hold
								+'/'
								+this.Fold
								+'/'
								+this.Name
								+' '
								+'('
								+(this.Rank+1).toString()
								+')'
								+'.'
								+this.Type
					);
				}
				*///due to efficiency this has been bond via prototype; compare comment on Face.make()
			}
			InstanceOf.prototype.path=function()
			{//defines the path including the file-name and -type; just to have a template for using naming- and sorting conventions; should be avoided by having the ability to load files automagically (with help of HTML 5 or server-side routines)
				return(''
							+this.Hold
							+'/'
							+this.Fold
							+'/'
							+this.Name
							+' '
							+'('
							+(this.Rank+1).toString()
							+')'
							+'.'
							+this.Type
				);
			}
			var TilesAsAnArrayOfNamesForSection=
			[
				'Head'//the first element in an Array Of Names should give the name or type of the section to generate in later versions;comparable to the header of a table-column
				,'Hair'
				,'Eye'
				,'Brow'
				,'Nose'
				,'Lip'
				,'Beard'
				,'Hat'
				,'Accessoire'
			];
			createInstancesFromArrayOfNames(TilesAsAnArrayOfNamesForSection);
			Faces=[];// =[]; short for =new Array();
		</script>
	</head>
	<body>
		<ol id="Face"></ol>
		<script>//Instance-Creation
			var E={};//new Object to save buffer-variables for Elements that will be generated; just to give a programmatical hint that the sub-objects are HtML-Elements and grant later usage-possibility for HtML-Element-creation-functions based on a self-defined subset (like standardized-attributes according to a selected DOCTYPE or similar specifics); the capitalized E represents also a subtree like the O represents a Node|Object or the C represents a Class or Collection (so it's part of a personal naming convention)
			E.ol=document.getElementById('Face');//ol is a Pointer (an Object-Variable) that points to an element which has the id Face. It is an ol-Tag that is used as the target-Container for the faces.
			for(var i=0;i<them.much.length;i++)
			{//maybe this for-loop could be replaced by an ARRAY.forEach-Loop; dunno yet, we'll see what comes next ...
				//Instance-Creation
				eval(''
					+'iFace'
					+i
					+'=new Face();'
				);//there has to be a better way to complete this task without an eval
				eval(''
					+'var iFace=iFace'+i+';'
				);//possibly defining a Singleton with private and public properties with the ability to create a clone based on given subsets|features would be the best

/*
				iFace.id='iFace'+i;//the internal(JavaScript-Object-Code) id of the generated iFace-Object, should be given automagically by a guid-routine and bond to the generated Node in the DOM (HtML-Element); It is double-trouble if 2 separate objects do the same ...
				iFace.Name='Face';//not in use yet, but: if img-Elements are used it is possible to set a name-Attribute to later seek for images in the document.images-Array of the DOM; Best would be a routine that uses the document.images-Array as a Palette, so no image has to be loaded several times, instead loaded once und used often; Is this possible?
				iFace.className='Face';//just given in the hope that there would be a simple way of setting the className, means the class-Attribute of the generated Element
				iFace.visibility;//the css-property visibility, as a blender-property of the generated iFace-Object; compare the comment in the line before if you want to understand the reasons to do this
				iFace.x=0;//similar to className and visibility
				iFace.y=0;//similar to x, className and visibility
*/

				E.li=document.createElement('li');//creates a li-Tag saved in the variable li
				E.li.setAttribute('id',('Face'+i));//sets the Attribute id to Face+the actual index of generated faces
				E.li.setAttribute('class','Face');//sets the class-Attribute to Face, so it can be styled via .Face
				E.li.setAttribute('onmouseup','Whos(this)');//sets the onmouseup-Attribute to the function Whos() and delivers the element itself (via this) in case the event is released
				for(actualTileName in TilesAsAnArrayOfNamesForSection)
				{//loops through any given element in the Array Of Names Of Face-Tiles
					var Part=TilesAsAnArrayOfNamesForSection[actualTileName];//Part is just a buffer-variable to cache the actual Face-Tiles Name; just to speed things up and make the following code more readable
					iFace[Part]=them[Part][parseInt(Math.random()*them[Part].length)];
					E.img=document.createElement('img');
					E.img.src=iFace[Part].path();
					E.img.setAttribute('class',Part);
					E.li.appendChild(E.img);
				}
				//create <img>'s based on list of parts of face
				E.ol.appendChild(E.li);
				//Faces[Faces.length]=iFace;//pushes generated Face-instance into Faces-Array (all faces)
				Faces.push(iFace);//does the same as Faces[Faces.length]=iFace; seems cleaner in my opinion but dunno if it is more agile or safer, has to be tested
			}
		</script>
	</body>
</html>

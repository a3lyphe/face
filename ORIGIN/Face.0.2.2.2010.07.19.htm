<!DOCType html>
<html>
	<head>
		<title>Face.0.1.6.2009.07.31</title>
		<meta
			http-equiv="Content-Script-Type"
			content="text/javascript"
			/>
		<meta
			http-equiv="Content-Style-Type"
			content="text/css"
			/>
		<meta
			http-equiv="content-language"
			content="de"
			/>
		<meta
			http-equiv="content-Type"
			content="text/html; charset=utf-8"
			/>
		<meta
			http-equiv="set-cookie"
			content="
				cookieName=cookiewert;
				expires=Sun, 01 Jan 2006 00:00:00 GMT;
				path=/;
				"
			/>
		<meta
			http-equiv="cache-control"
			content="no-cache" /><!--No Cache for: Browser-->
		<meta
			http-equiv="pragma"
			content="no-cache"
			/><!--No Cache for: Proxy-Server -->
		<meta
			name="generator"
			content="A3lyphe"
			/>
		<style>
			body
			{
				background-color:#632A40;
				padding:0;
				margin:0;
			}
			*
			{
				padding:0;
				margin:0;
				border:none;
			}
			img
			{
				width:64px;
				height:96px;
			}
			li
			{
				/*position:absolute;*/
				padding:0;
				margin:0;
				float:left;
				clear:right;
				margin:24px;
			}
			/*Face*/
			.Face
			{
				width:128px;
				height:224px;
			}
			.Face *
			{
				position:absolute;
			}
			.Face .Head
			{
				
			}
			.Face .Hair
			{
				
			}
			.Face .Eye
			{
				
			}
			.Face .Brow
			{
				
			}
			.Face .Nose
			{
				
			}
			.Face .Lip
			{
				
			}
			.Face .Beard
			{
				display:none;
			}
			.Face .Hat
			{
				display:none;
			}
			.Face .Accessoire
			{
				display:none;
			}
		</style>
		<script>//Classes
			var Face=function(){
				var mine=this;
				this.Name='Face';
				this.id;
				this.visibility;
				this.x;
				this.Head;
				this.Hair;
				this.Eye;
				this.Brow;
				this.Nose;
				this.Lip;
				this.Beard;
				this.Hat;
				this.Accessoire;
				this.HtML='';
				this.Fold='Icon';
				this.make=function(Hold){
					for(i=0;i<Hold.length;i++){//instance-generation:Head
						var that=new InstanceOf(mine.Name);//instance of a 'Head'
						that.Rank=i;//set the Rank of the Head-Instance (needed for path generation
						Hold[i]=that;
					}
				}
			}
		</script>
		<script>//functions
			function CreateInstance(Class,Amount){
				for(i=0;i<Amount.length;i++){//instance-generation:Head
					var that=new InstanceOf(Class);//instance of a 'Head'
					that.Rank=i;//set the Rank of the Head-Instance (needed for path generation
					Amount[i]=that;
				}
			}
			function CreateFace(Parts){
				for(each in Parts){
					CreateInstance(Parts[each],them[Parts[each]]);
				}
			}
			function Whos(that){
					alert(''
						+'id: '
							+that.id
						+';'
					);
				}
		</script>
		<script>//Global Variables
			Icon=new Object();
			Icon.Hold='Icon';//the mainly used images Folder directly under root directory

			//Arrays for images to build pirates
			var them=
			{
				meineFunktion:function(){
					this.real='is real';
					this.makeSome=function(){
						alert('Something was done');
					}
				},
				Head:new Array(5),
				Hair:new Array(19),
				Eye:new Array(9),
				Brow:new Array(7),
				Nose:new Array(6),
				Lip:new Array(9),
				Beard:new Array(20),
				Hat:new Array(8),
				Accessoire:new Array(6),

				much:new Array(99)//How many Faces?
			}
			mine=new them.meineFunktion();
			alert(mine.real);
			mine.makeSome();
			//class:instanceOf
			InstanceOf=function(Class){
				this.Name=Class;
				this.Hold=Icon.Hold;//the parent Folder
				this.Fold=Class;//the Folder the generated Instance is stored at (e.g.:'Head')
				this.Name=Class;//the Name under which the generated Instance is filed (e.g.:'Head.1','Head01','CrumpyHead')
				this.Type='png';//the Type of image the generated Instance is stored in (e.g.:png,jpg,gif,svg)
				this.Rank;//position in list/hierarchy/array
				this.path=function(){
					return(''
								+this.Hold
								+'/'
								+this.Fold
								+'/'
								+this.Name
								+' '
								+'('
								+(this.Rank+1).toString()
								+')'
								+'.'
								+this.Type
					);
				}
			}
			var FaceTiles=['Head','Hair','Eye','Brow','Nose','Lip','Beard','Hat','Accessoire'];
			CreateFace(FaceTiles);
			Faces=new Array();//
		</script>
	</head>
	<body>
		<ol id="Face"></ol>
		<script>//Instance-Creation
			var ol=document.getElementById('Face');
			for(var i=0;i<them.much.length;i++)
			{
				//Instance-Creation
				eval(''
					+'iFace'
					+i
					+'='
					+'new '
					+'Face'
					+'()'
					+';'
				);
				eval(''
					+'var '
					+'iFace'
					+'='
					+'iFace'
					+i
					+';'
				);
				iFace.id='iFace'+i;
				iFace.Name='Face';
				iFace.className='Face';
				iFace.visibility;
				iFace.x=0;
				iFace.y=0;
				
				var li=document.createElement('li');
				li.setAttribute('id',('Face'+i));
				li.setAttribute('class','Face');
				li.setAttribute('onmouseup','Whos(this)');
				for(Tile in FaceTiles)
				{
					
					iFace[FaceTiles[Tile]]=them[FaceTiles[Tile]][parseInt(Math.random()*them[FaceTiles[Tile]].length)];
					var img=document.createElement('img');
					img.src=iFace[FaceTiles[Tile]].path();
					img.setAttribute('class',FaceTiles[Tile]);
					li.appendChild(img);
				}
				//create <img>'s based on list of parts of face
				ol.appendChild(li);
				Faces[Faces.length]=iFace;//transfer generated Face-instance into Faces-Array (all faces)
			}
		</script>
	</body>
</html>
